#
# Copyright 2021-2025 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "srsran-cudu.fullname" . }}
  labels:
    {{- include "srsran-cudu.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "srsran-cudu.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "srsran-cudu.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "srsran-cudu.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.network.hostNetwork }}
      hostNetwork: true
      {{- end }}
      volumes:
        {{- if .Values.o1.enable_srs_o1 }}
        - name: o1-gnb-config
          emptyDir:
            sizeLimit: 2Mi
        - name: netconf-running-config-volume
          emptyDir:
            sizeLimit: 2Mi
        - name: o1-config-volume
          configMap:
            name: o1-configmap
            defaultMode: 0777
        {{- else }}
        - name: config-volume
          configMap:
            name: srsgnb-configmap
        {{- end }}
        {{- if .Values.debugging.enabled }}
        - name: srs-host-volume
          hostPath:
            path: {{ .Values.debugging.hostPath }}/{{ now | date "2006-01-02--15-04-05" }}
            type: DirectoryOrCreate
        {{- end }}
        {{- if .Values.resources.enable_hugepages_1gi }}
        - name: hugepage-1gi
          emptyDir:
            medium: HugePages-1Gi
        {{- end }}
        {{- if .Values.resources.enable_hugepages_2mi }}
        - name: hugepage-2mi
          emptyDir:
            medium: HugePages-2Mi
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ template "srsran-cudu.image" .Values.image }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.o1.enable_srs_o1 }}
          livenessProbe:
            httpGet:
              path: /config-healthy
              port: {{ .Values.o1.healthcheckPort }}
            initialDelaySeconds: 10
            periodSeconds: 3
          {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              while true; do
                gnb -c /etc/config/gnb-config.yml
                exit_code=$?
                if [ $exit_code -ne 0 ]; then
                  exit $exit_code
                fi
              done
          volumeMounts:
            {{- if .Values.o1.enable_srs_o1 }}
            - name: o1-gnb-config
              mountPath: /etc/config/
            {{- else }}
            - name: config-volume
              mountPath: "/etc/config/"
            {{- end }}
            {{- if .Values.debugging.enabled }}
            - mountPath: {{ .Values.debugging.containerPath }}
              name: srs-host-volume
            {{- end }}
            {{- if .Values.resources.enable_hugepages_1gi }}
            - name: hugepage-1gi
              mountPath: /hugepages-1Gi
            {{- end }}
            {{- if .Values.resources.enable_hugepages_2mi }}
            - name: hugepage-2mi
              mountPath: /hugepages-2Mi
            {{- end }}
          {{- if .Values.o1.enable_srs_o1 }}
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    timeout=30
                    elapsed=0
                    while [ $elapsed -lt $timeout ]; do
                      response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:{{ .Values.o1.healthcheckPort }}/config-healthy)
                      echo "Health check response: $response"

                      if [[ "$response" =~ 200 || "$response" =~ 400 ]]; then
                        echo "API server is healthy."
                        curl -H "Content-Type: application/json" -d "{restarted:true}" -X POST http://localhost:{{ .Values.o1.healthcheckPort }}/restarted
                        exit 0
                      fi
                      sleep 5
                      elapsed=$((elapsed + 5))
                    done

                    echo "Netconf server not available, last response: $response. Exiting postStart hook."
                    exit 1
          {{- end }}
        {{- if .Values.o1.enable_srs_o1 }}
        - name: srs-o1-adapter
          securityContext:
            {{- toYaml .Values.o1.o1Adapter.securityContext | nindent 12 }}
          image: "{{ template "srsran-cudu.o1.o1Adapter.image" .Values.o1.o1Adapter.image }}"
          imagePullPolicy: {{ .Values.o1.o1Adapter.image.pullPolicy }}
          resources:
            {{- toYaml .Values.o1.o1Adapter.resources | nindent 12 }}
          command: [ "/usr/local/bin/python3" ]
          args: [ "/usr/src/app/o1_adapter.py", "--host", {{ .Values.o1.netconfServerAddr }}, "--config", "/etc/config/gnb-config.yml", "--template", "gnb.yaml" ]
          volumeMounts:
            - name: o1-gnb-config
              mountPath: /etc/config
        - name: netconf-server
          securityContext:
            {{- toYaml .Values.o1.netconfServer.securityContext | nindent 12 }}
          image: "{{ template "srsran-cudu.o1.netconfServer.image" .Values.o1.netconfServer.image }}"
          imagePullPolicy: {{ .Values.o1.netconfServer.image.pullPolicy }}
          resources:
            {{- toYaml .Values.o1.netconfServer.resources | nindent 12 }}
          ports:
            - name: netconf
              containerPort: {{ .Values.o1.o1Port }}
              protocol: TCP
          command: [ "/usr/local/bin/entrypoint.sh" ]
          args: [ "/etc/netconf/o1-config.xml", "/etc/netconf-running" ]
          volumeMounts:
            - name: o1-config-volume
              mountPath: "/etc/netconf"
            - name: netconf-running-config-volume
              mountPath: "/etc/netconf-running"
        {{- end }}
      dnsPolicy: ClusterFirstWithHostNet
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
